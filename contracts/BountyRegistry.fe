# Poor man's interface
contract ISolvable:

  pub fn is_solved(self) -> bool:
    revert

# Revert errors
struct AlreadyLocked:
    pass

struct InvalidClaim:
    pass

struct OnlyAdmin:
    pass

struct InvalidDeposit:
  pass

# Structure to represent a lock with a lease time
struct ClaimLock:
    claimer: address
    valid_until_block: u256

const LOCK_PERIOD_IN_BLOCKS: u256 = 1000
const ONE_ETH_IN_WEI: u256 = 1000000000000000000

contract BountyRegistry:

    lock: ClaimLock
    open_challenges: Map<address, bool>
    admin: address

    pub fn __init__(self, admin: address):
        self.admin = admin

    pub fn lock(self):
        if self.is_locked():
          revert AlreadyLocked()
        elif msg.value < ONE_ETH_IN_WEI:
          revert InvalidDeposit()
        else:
            self.lock = ClaimLock(claimer=msg.sender, valid_until_block=block.number+LOCK_PERIOD_IN_BLOCKS)

    pub fn is_locked(self) -> bool:
        return self.lock.valid_until_block >= block.number

    pub fn register_challenge(self, challenge: address):
        self.validate_is_admin()
        self.open_challenges[challenge] = true

    pub fn remove_challenge(self, challenge: address):
        self.validate_is_admin()

        if self.is_locked():
            revert AlreadyLocked()
        else:
            self.open_challenges[challenge] = false


    pub fn is_open_challenge(self, challenge: address) -> bool:
        return self.open_challenges[challenge]

    pub fn claim(self, challenge: address):
        if not self.is_locked():
            revert InvalidClaim()
        elif not self.open_challenges[challenge]:
            revert InvalidClaim()
        elif self.lock.claimer != msg.sender:
            revert InvalidClaim()
        else:
            let puzzle: ISolvable = ISolvable(challenge)
            if puzzle.is_solved():
                send_value(msg.sender, balance())
            else:
                revert InvalidClaim()

    pub fn withdraw():
        # TODO: Admin should be allowed to withdraw funds if there's no lock in progress
        # This would be used to migrate to a new bounty registry
        pass

    fn validate_is_admin(self):
        if msg.sender != self.admin:
            revert OnlyAdmin()